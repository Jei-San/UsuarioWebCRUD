@page "/edituser/{id}"
@inject HttpClient Http
@inject NavigationManager navigationManager
@using UsuarioWebCRUD.Shared;
@using UsuarioWebCRUD.Shared.Models;

<h3>Editar Usuario</h3>
<form>
    <div class="row">
        <div class="col-md-8">
            <div class="form-group">
                <label for="FirstName">Nombre</label>
                <input form="FirstName" class="form-control" @bind="@user.FirstName" />
            </div>
            <br />
            <div class="form-group">
                <label for="LastName">Apellido</label>
                <input form="LastName" class="form-control" @bind="@user.LastName" />
            </div>
        </div>
        <RadzenDropDown AllowClear="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                        @bind-Value=@profession.ProfessionId Multiple="true" Placeholder="Select..." Data=@professions TextProperty="ProfessionName" ValueProperty="ProfessionName"
                        Change=@PostUserProfession Style="width:400px" />
        <div class="container mb-3 mt-3">
            <table class="table table-striped table-bordered mydatatable" style="width:100%">
                <thead>
                    <tr>
                        <th>ProfessionId</th>
                        <th>Profession</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var row in data)
                    {
                        if (row.Profession != null)
                        {
                            <tr>
                                <td>@row.Profession.ProfessionId</td>
                                <td>@row.Profession.ProfessionName</td>
                                <td>

                                    <input type="button" value="Borrar" @onclick="@(() => DeleteProfession(row.UserProfession.UserProfessionId))" class="btn btn-primary" />
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>
        </div>


    </div>
    <div class="row">
        <div class="col-md-4">
            <div class="form-group">
                <input type="button" class="btn btn-primary" @onclick="@(() => UpdateUser(user.UserId))" value="Guardar" />
                <input type="button" class="btn" @onclick="@Cancel" value="Cancelar" />

            </div>
        </div>
    </div>
</form>
@code {
    [Parameter]
    public string id { get; set; }

    List<UserData> data = new List<UserData>();
    User user = new User();
    Profession profession = new Profession();
    IEnumerable<Profession> professions;
    IEnumerable<string> multipleValues = new string[] { "ALFKI", "ANATR" };
    UserProfession userProfession = new UserProfession();


    protected override async Task OnInitializedAsync()
    {
        data = await Http.GetFromJsonAsync <List<UserData>>($"api/UserInfoes/{id}");
        user = data.First().User;

        professions = await Http.GetFromJsonAsync<IEnumerable<Profession>>("api/ProfessionInfoes");
    }

    protected async Task DeleteProfession(int id)
    {
        await Http.DeleteAsync($"api/UserProfessionInfoes/{id}");
        navigationManager.NavigateTo("userlist");
    }

    protected async Task UpdateUser(int id)
    {
        await Http.PutAsJsonAsync($"api/UserInfoes/{id}", user);
        navigationManager.NavigateTo("userlist");
    }

    public async Task PostUserProfession()
    {
        await Http.PostAsJsonAsync("api/UserProfesionInfoes", userProfession);
    }

    void Cancel()
    {
        navigationManager.NavigateTo("userlist");
    }
}
